#!/bin/bash

# requires xmllint (package libxml2-utils) and youtube-dl (package youtube-dl, but should be updated frequently)

conf_file=~/.play.conf
[[ -f $conf_file ]] && source $conf_file

# Truncate strings that are too long, and space padd the ones that are too short
function truncate_and_padd() {
  allign=$1
  size=$2
  shift 2
  text=$*
  if [[ ${#text} -gt $size ]]; then
    truncto=$(($size - 3))
    text="${text:0:$truncto}..."
  else
    # It seems printf padding doesn't do well with special characters, so we compute the number of spaces by hand
    padding=$(($size - ${#text}))
    if [[ $allign == r ]]; then
      #text=$(printf "%-${size}s" "$text")
      text=$text$(printf "%-${padding}s" "")
    else
      #text=$(printf "%${size}s" "$text")
      text=$(printf "%-${padding}s" "")$text
    fi
  fi
  echo "$text"
}

function decode_html_characters() {
 echo $* | perl -MHTML::Entities -pe 'decode_entities($_);'
}

function extract_title() {
  # Using string(//a/@title) causes some improper decoding of the title, so we have to use //a/@title and get the text by hand
  title=$(echo $* | xmllint --html --xpath '(//a/@title)[1]' -)
  title=$(echo $title | sed 's/^title="\(.*\)"$/\1/')
  # Remove trailing spaces
  title=$(echo $title | sed 's/^ *//' | sed 's/ *$//')
  echo "$title"
}

function extract_url() {
  url="https://www.youtube.com"$(echo $* | xmllint --html --xpath 'string(//a/@href)' -)
  echo $url
}

function extract_duration() {
  duration=$(echo $* | xmllint --html --xpath 'string(//span[@class="accessible-description"])' -)
  duration=$(echo $duration | grep 'Duration')
  duration=$(echo $duration | sed 's/.*Duration: //' | sed 's/. *$//')
  if [[ $duration != *:[0-9]* ]]; then
    hours=$(echo $duration | grep -o '[0-9] hour' | sed 's_ hour__' | xargs printf "%02d")
    minutes=$(echo $duration | grep -o '[0-9]* minute' | sed 's_ minute__' | xargs printf "%02d")
    seconds=$(echo $duration | grep -o '[0-9]* second' | sed 's_ second__' | xargs printf "%02d")
    if [[ $hours -gt 0 ]]; then
      duration=${hours}:${minutes}:${seconds}
    else
      duration=${minutes}:${seconds}
    fi
  fi
  echo "$duration"
}

function extract_user() {
  if [[ $mode == user ]]; then
    user=$(echo $query | sed 's;.*user/;;')
  elif [[ $mode == search ]]; then
    user=$(echo $* | xmllint --html --xpath '//div[@class="yt-lockup-byline "]/a/text()' -)
  else
    user=$(echo $* | xmllint --html --xpath '//span[@class="stat attribution"]/span/text()' -)
  fi
  echo "$user"
}

function extract_line() {
  local idx=$1
  shift 1
  line=$*
  url=$(extract_url $line)
  title=$(extract_title $line)
  duration=$(extract_duration $line)

  if [[ "$url" == *youtube.com/watch* ]]; then
    type=Video
    user=$(extract_user $line)
  elif [[ "$url" == *youtube.com/user* ]]; then
    type=User
    user=$title
  else
    type=Other
    user=$(extract_user $line)
  fi

  if grep $'\t'$url$'\t' "$history_file" > /dev/null 2>&1; then
    seen="true"
    seen_symb="*"
  else
    seen="false"
    seen_symb=" "
    not_seen+=($idx)
  fi

  # Decode html special characters (can't be done earlier as it conflicts with xmllint)
  user=$(decode_html_characters $user)
  title=$(decode_html_characters $title)

  # Padd everything to have a pretty allignment
  duration=$(truncate_and_padd l 9 $duration)
  title=$(truncate_and_padd r 70 $title) # Max is 100 but Youtube truncates at 70
  type=$(truncate_and_padd r 8 $type)
  user=$(truncate_and_padd r 24 $user)
  index=$(truncate_and_padd l 5 "[$idx]$seen_symb")

  if [[ "$display_urls" = true ]]; then
    display=$(printf "%s %s %s  %s  %s (%s)\n" "$type" "$user" "$duration" "$index" "$title" "$url")
  else
    display=$(printf "%s %s %s  %s  %s\n" "$type" "$user" "$duration" "$index" "$title")
  fi

  links[$idx]="$url"
  displays[$idx]="$display"
}


function select_random_video() {
  n_not_seen=${#not_seen[@]}
  if [[ $n_not_seen -gt 0 ]] && [[ "$autoplay_seen" != "true" ]]; then
    i=$(($RANDOM % $n_not_seen))
    echo ${not_seen[$i]}
  else
    echo $((($RANDOM % ($idx - 1)) + 1))
  fi
}

# Start here

if [[ "$1" == "--autoplay" ]]; then
  timeout="-t $autoplay_wait"
  autoplay="$1"
  shift
fi

query=$@
if [[ -z $query ]]; then
  exit 1
fi

if [[ "$query" == *youtube.com/watch* ]]; then
  echo "Looking up videos from page: '$query'"
  search_url=$query
  mode="video"
  div="content-wrapper"
elif [[ "$query" == *youtube.com/user* ]]; then
  echo "Looking up videos from user: '$query'"
  search_url=$query
  mode="user"
  div="yt-lockup-content"
else
  echo "Searching videos for: '$query'"
  search_url="https://www.youtube.com/results?search_query="$(echo $query | sed 's/ /%20/g') # would be good to properly encode the query
  mode="search"
  div="yt-lockup-content"
fi

# Crawl
idx=1
declare -A links
declare -A displays
declare -a not_seen
while read line; do
  if [[ -z $line ]]; then
    continue
  fi
  extract_line $idx $line
  idx=$(($idx + 1))
done < <(curl --silent --header 'Accept-Language: en' "$search_url" | tr -d '\n' | xmllint --html --xpath "//div[@class = \"$div\"]" - 2> /dev/null | sed "s/\(<div class=\"$div\"\)/\n\1/g")

idx=1
while [[ ! -z ${displays[$idx]} ]]; do
  echo -e "${displays[$idx]}"
  idx=$(($idx + 1))
done 

read $timeout -p 'Watchiou wanna see? ' index
[[ -z $index ]] && index=$(select_random_video) && echo "$index (selected randomly)"
[[ ! -z ${links[$index]} ]] && toplay=${links[$index]} || toplay=$index

if [[ $toplay == */watch* ]]; then
  youplay $autoplay $toplay
else
  yousearch $autoplay $toplay
fi
