#!/bin/bash

# requires and yt-dlp (package yt-dlp, but should be updated frequently)

youplay_folder=$(readlink -f "${BASH_SOURCE[0]}" | xargs dirname)
[[ ! -f $youplay_folder/youplay_args ]] && { echo "Could not find args parser!"; exit 1; } 
source $youplay_folder/youplay_args

declare -A links
declare -A displays
declare -a not_seen

function search_videos() {
  # Get webpage and extract channels and videos from a <script></script>
  curl --silent --header 'Accept-Language: en' "$search_url" |
    tr -d '\n' |
    sed 's/<script[^>]*>/\n/g' |
    sed 's;</script>;\n;g' |
    grep 'var ytInitialData' |
    sed 's/.*ytInitialData =//' |
    sed 's/;$//' |
    jq '.' > response.json

  # Search for channels
  jq '[
      .. |
      .channelRenderer? |
      select( . != null ) |
      {
        owner: .title.simpleText,
        url: .navigationEndpoint?.commandMetadata?.webCommandMetadata?.url?,
        id: .channelId,
        type: "Channel"
      } |
      select( .url != null )
    ] |
    unique'  response.json > response-channels.json
  
  # Search for videos
  jq '[
      .. |
      .videoRenderer?, .compactVideoRenderer?, .endScreenVideoRenderer? |
      { 
        title: (.title.runs[]?.text, .title.simpleText),
        id: .videoId,
        length: .lengthText.simpleText,
        owner: .shortBylineText.runs[]?.text,
        type: "Video"
      } |
      select( .title != null )
    ] |
    unique' response.json > response-videos.json

  # Display
  idx=0
  local_idx=0
  while [[ $idx -lt $(jq 'length' response-videos.json) ]]; do
    extract_json $idx "$(jq .[$idx] response-videos.json)"
    local_idx=$(($local_idx + 1))
    idx=$(($idx + 1))
  done

  local_idx=0
  while [[ $local_idx -lt $(jq 'length' response-channels.json) ]]; do
    extract_json $idx "$(jq .[$local_idx] response-channels.json)"
    local_idx=$(($local_idx + 1))
    idx=$(($idx + 1))
  done
}


function read_input() {
  [[ "$autoplay" == "true" ]] && timeout="-t $autoplay_delay"
  read $timeout -p 'Watchiou wanna see? ' input
  # exit code is 142 when read hits timeout
  [[ $? == 142 ]] && input=$(select_random_video) && echo "$input (selected randomly)"
  extract_additional_args $input
}

# Truncate strings that are too long, and space padd the ones that are too short
function truncate_and_padd() {
  allign=$1
  size=$2
  shift 2
  text=$*
  if [[ $size -le 3 ]]; then
    text="${text:0:$size}"
  elif [[ ${#text} -gt $size ]]; then
    truncto=$(($size - 3))
    text="${text:0:$truncto}..."
  else
    # It seems printf padding doesn't do well with special characters, so we compute the number of spaces by hand
    padding=$(($size - ${#text}))
    if [[ $allign == r ]]; then
      #text=$(printf "%-${size}s" "$text")
      text=$text$(printf "%-${padding}s" "")
    else
      #text=$(printf "%${size}s" "$text")
      text=$(printf "%-${padding}s" "")$text
    fi
  fi
  echo "$text"
}

function decode_html_characters() {
 echo $* | perl -MHTML::Entities -pe 'decode_entities($_);'
}

function extract_json() {
  local idx=$1
  shift 1
  json=$*

  user=$(echo "$json" | jq -r '.owner')
  type=$(echo "$json" | jq -r '.type')

  if [[ "$type" == "Video" ]]; then
    url=https://www.youtube.com/watch?v=$(echo "$json" | jq -r '.id')
    title=$(echo "$json" | jq -r '.title')
    duration=$(echo "$json" | jq -r '.length')
  else
    url=https://www.youtube.com$(echo "$json" | jq -r '.url')
  fi

  if grep $'\t'$url$'\t' "$history_file" > /dev/null 2>&1; then
    seen="true"
    seen_symb="*"
  else
    seen="false"
    seen_symb=" "
    not_seen+=($idx)
  fi

  # Decode html special characters (not sure if this is still needed)
  user=$(decode_html_characters $user)
  title=$(decode_html_characters $title)

  # Padd everything to have a pretty allignment
  if [[ "$tiny" = true ]]; then
    # Fit everything in 80 characters
    type=$(truncate_and_padd r 1 $type)
    user=$(truncate_and_padd r 16 $user)
    duration=$(truncate_and_padd l 9 $duration)
    index=$(truncate_and_padd l 5 "[$idx]$seen_symb")
    title=$(truncate_and_padd r 45 $title)
    display=$(printf "%s %s %s %s %s\n" "$type" "$user" "$duration" "$index" "$title")
  else
    type=$(truncate_and_padd r 8 $type)
    user=$(truncate_and_padd r 24 $user)
    duration=$(truncate_and_padd l 9 $duration)
    index=$(truncate_and_padd l 5 "[$idx]$seen_symb")
    title=$(truncate_and_padd r 70 $title) # Max is 100 but Youtube truncates at 70
    display=$(printf "%s %s %s  %s  %s (%s)\n" "$type" "$user" "$duration" "$index" "$title" "$url")
  fi

  links[$idx]="$url"
  echo -e "$display"
}

function select_random_video() {
  local idx=0
  n_not_seen=${#not_seen[@]}
  if [[ ${#not_seen[@]} -gt 0 ]] && [[ "$autoplay_seen" != "true" ]]; then
    choose_from=(${not_seen[@]})
  else
    choose_from=($(seq -s ' ' 1 ${#links[@]}))
  fi
  choose_from_size=${#choose_from[@]}

  if [[ "$auto_selection" == "first" ]]; then
    # select the first video
    idx=0
  elif [[ $auto_selection == "random" ]]; then
    # select a video uniformly at random
    idx=$(($RANDOM % $choose_from_size))
  elif [[ "$auto_selection" == "linear-bias" ]]; then
    # select a random video with a bias towards the first videos
    total=$(($choose_from_size * ($choose_from_size + 1) / 2))
    target=$(($RANDOM % $total))
    idx=0
    count=$choose_from_size
    while [[ $count -le $target ]]; do
      idx=$(($idx + 1))
      count=$(($count + $choose_from_size - $idx))
    done
  fi
  echo ${choose_from[$idx]}
}

# extract additional arguments if any
function extract_additional_args() {
  # this is done in a funtion so shif can operate on the arguments
  [[ $* = -* ]] && source $youplay_folder/youplay_args
  input=$*
}


# Start here

query=$@
if [[ -z $query ]]; then
  $youplay_folder/youplay_args -h
  read_input
else
  search_videos
  read_input
fi

if [[ "$input" = "/r" || -z $input ]]; then # replay
  todo=$query
elif [[ ! -z ${links[$input]} ]]; then # selected from suggestion
  todo=${links[$input]}
else # new search
  todo=$input
fi

if [[ $todo == */watch* ]]; then
  $youplay_folder/youplay $todo
else
  $youplay_folder/yousearch $todo
fi
