#!/bin/bash

youplay_folder=$(readlink -f "${BASH_SOURCE[0]}" | xargs dirname)
[[ ! -f $youplay_folder/youplay_args ]] && { echo "Could not find args parser!"; exit 1; } 
source $youplay_folder/youplay_args

[[ "$audio_only" == "true" ]] && format="bestaudio" || format=$video_format

src="$*"
while read id; do # Loop in case we are reading a playlist
  url="https://www.youtube.com/watch?v=$id"
  info=$(youtube-dl --get-title --get-url --format $format "$url")
  title=$(echo -e "$info" | head -1)
  stream=$(echo -e "$info" | tail -1)

  # Record history
  ts=$(date '+%s')
  date=$(date '+%Y-%m-%d %H:%M:%S')
  [[ "$record_history" == "true" ]] && echo -e "$ts\t$date\t$url\t$title" >> "$history_file"

  # Play
  if [[ "$download" == "true" ]]; then
    echo -e "Downloading: $title ($url)"
    # X is to prevent going up in case $download_output is a folder
    download_dir=$(dirname "$download_output"X)
    available_space=$(df --output=avail $download_dir | tail -1)
    if [[ $available_space -gt $min_avail_space ]]; then
      youtube-dl -o "$download_output%(title)s-%(id)s.%(ext)s" --format $format "$url"
    else
      echo "Not enough free space in '$download_dir', skipping download"
      autoplay=false
    fi
  else
    echo -e "Playing: $title ($url)"
    ${player} "$stream" > /dev/null 2>&1 </dev/tty
  fi

  exit_code=$?
  # For playlists: break the loop if the video is stopped with a ctrl-c or error
  if [[ $exit_code != 0 && $exit_code != 3 ]]; then
    autoplay=false # when the video is stopped with ctrl-c or error, we disable the autoplay
    break # omxplayer exits with 0 when stopped with 'q'
  fi
done < <(youtube-dl --get-id "$src")

$youplay_folder/yousearch "$src"
